//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18
func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line sql.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	updateExpr           *UpdateExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	constraintDefinition *ConstraintDefinition
	indexInfo            *IndexInfo
	constraintInfo       ConstraintInfo
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const INSERT = 57349
const UPDATE = 57350
const DELETE = 57351
const FROM = 57352
const WHERE = 57353
const GROUP = 57354
const HAVING = 57355
const ORDER = 57356
const BY = 57357
const LIMIT = 57358
const OFFSET = 57359
const FOR = 57360
const ALL = 57361
const DISTINCT = 57362
const AS = 57363
const EXISTS = 57364
const ASC = 57365
const DESC = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const UNLOCK = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const UNIQUE = 57449
const PRIMARY = 57450
const COLUMN = 57451
const CONSTRAINT = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const REFERENCES = 57456
const KEY_BLOCK_SIZE = 57457
const SHOW = 57458
const DESCRIBE = 57459
const EXPLAIN = 57460
const DATE = 57461
const ESCAPE = 57462
const REPAIR = 57463
const OPTIMIZE = 57464
const TRUNCATE = 57465
const MAXVALUE = 57466
const PARTITION = 57467
const REORGANIZE = 57468
const LESS = 57469
const THAN = 57470
const BIT = 57471
const TINYINT = 57472
const SMALLINT = 57473
const MEDIUMINT = 57474
const INT = 57475
const INTEGER = 57476
const BIGINT = 57477
const INTNUM = 57478
const REAL = 57479
const DOUBLE = 57480
const FLOAT_TYPE = 57481
const DECIMAL = 57482
const NUMERIC = 57483
const TIME = 57484
const TIMESTAMP = 57485
const DATETIME = 57486
const YEAR = 57487
const CHAR = 57488
const VARCHAR = 57489
const BOOL = 57490
const CHARACTER = 57491
const VARBINARY = 57492
const NCHAR = 57493
const TEXT = 57494
const TINYTEXT = 57495
const MEDIUMTEXT = 57496
const LONGTEXT = 57497
const BLOB = 57498
const TINYBLOB = 57499
const MEDIUMBLOB = 57500
const LONGBLOB = 57501
const JSON = 57502
const ENUM = 57503
const NULLX = 57504
const AUTO_INCREMENT = 57505
const APPROXNUM = 57506
const SIGNED = 57507
const UNSIGNED = 57508
const ZEROFILL = 57509
const DATABASES = 57510
const TABLES = 57511
const VITESS_KEYSPACES = 57512
const VITESS_SHARDS = 57513
const VSCHEMA_TABLES = 57514
const NAMES = 57515
const CHARSET = 57516
const CURRENT_TIMESTAMP = 57517
const DATABASE = 57518
const CURRENT_DATE = 57519
const CURRENT_TIME = 57520
const LOCALTIME = 57521
const LOCALTIMESTAMP = 57522
const UTC_DATE = 57523
const UTC_TIME = 57524
const UTC_TIMESTAMP = 57525
const REPLACE = 57526
const CONVERT = 57527
const CAST = 57528
const GROUP_CONCAT = 57529
const SEPARATOR = 57530
const MATCH = 57531
const AGAINST = 57532
const BOOLEAN = 57533
const LANGUAGE = 57534
const WITH = 57535
const QUERY = 57536
const EXPANSION = 57537
const UNUSED = 57538

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"REFERENCES",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VSCHEMA_TABLES",
	"NAMES",
	"CHARSET",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 23,
	-2, 4,
	-1, 270,
	79, 575,
	108, 575,
	-2, 40,
	-1, 272,
	79, 597,
	108, 597,
	-2, 42,
	-1, 277,
	108, 475,
	-2, 471,
	-1, 278,
	108, 476,
	-2, 472,
	-1, 557,
	5, 23,
	-2, 422,
	-1, 592,
	108, 478,
	-2, 474,
	-1, 754,
	5, 24,
	-2, 299,
	-1, 848,
	5, 24,
	-2, 423,
	-1, 924,
	5, 23,
	-2, 425,
	-1, 997,
	5, 24,
	-2, 426,
}

const yyPrivate = 57344

const yyLast = 7873

var yyAct = [...]int{

	278, 1007, 864, 929, 516, 737, 339, 738, 635, 451,
	269, 595, 308, 901, 622, 701, 931, 694, 591, 704,
	818, 583, 389, 604, 243, 406, 65, 313, 718, 780,
	138, 594, 144, 138, 810, 46, 671, 734, 607, 362,
	368, 311, 631, 280, 746, 302, 273, 393, 45, 1039,
	378, 651, 528, 1028, 138, 138, 50, 143, 1036, 1022,
	138, 1034, 1027, 914, 703, 649, 1021, 963, 284, 983,
	264, 252, 241, 340, 40, 240, 257, 52, 53, 54,
	55, 776, 235, 274, 871, 872, 873, 615, 940, 989,
	258, 300, 655, 874, 623, 958, 956, 259, 1033, 1030,
	135, 648, 1008, 800, 1001, 608, 291, 290, 579, 581,
	610, 286, 129, 128, 40, 129, 459, 236, 237, 238,
	239, 454, 248, 981, 757, 267, 756, 263, 453, 138,
	283, 138, 755, 797, 282, 138, 287, 610, 281, 799,
	140, 138, 130, 970, 390, 3, 131, 132, 133, 645,
	650, 643, 1010, 482, 481, 491, 492, 484, 485, 486,
	487, 488, 489, 490, 483, 769, 948, 493, 505, 506,
	851, 468, 822, 761, 515, 410, 616, 295, 337, 653,
	656, 781, 580, 471, 902, 242, 484, 485, 486, 487,
	488, 489, 490, 483, 880, 315, 493, 493, 469, 288,
	623, 289, 609, 647, 63, 294, 483, 606, 605, 493,
	603, 296, 409, 608, 471, 904, 916, 646, 719, 875,
	982, 980, 456, 719, 297, 834, 774, 1020, 370, 609,
	1003, 798, 944, 796, 275, 43, 906, 678, 910, 652,
	905, 293, 903, 612, 881, 674, 943, 908, 613, 262,
	654, 676, 677, 675, 543, 544, 907, 138, 695, 473,
	696, 909, 911, 789, 138, 138, 138, 788, 777, 65,
	803, 804, 805, 1011, 1015, 486, 487, 488, 489, 490,
	483, 992, 364, 493, 65, 828, 138, 827, 138, 65,
	942, 138, 470, 469, 138, 472, 138, 787, 458, 918,
	470, 469, 879, 470, 469, 867, 366, 971, 1032, 471,
	770, 470, 469, 766, 464, 1017, 301, 471, 971, 978,
	471, 466, 40, 298, 299, 697, 829, 373, 471, 507,
	508, 509, 510, 511, 512, 513, 397, 391, 450, 482,
	481, 491, 492, 484, 485, 486, 487, 488, 489, 490,
	483, 974, 301, 493, 470, 469, 455, 452, 457, 971,
	972, 460, 452, 292, 463, 664, 666, 667, 65, 281,
	665, 471, 301, 138, 470, 469, 138, 138, 138, 138,
	138, 936, 935, 502, 504, 560, 811, 985, 138, 545,
	984, 471, 138, 365, 876, 138, 709, 403, 735, 138,
	138, 407, 274, 530, 531, 532, 533, 534, 535, 536,
	407, 514, 65, 846, 518, 519, 520, 521, 522, 523,
	524, 585, 527, 529, 529, 529, 529, 529, 529, 529,
	529, 537, 538, 539, 540, 274, 592, 573, 547, 624,
	625, 626, 582, 559, 375, 558, 884, 405, 816, 263,
	263, 263, 263, 263, 588, 138, 599, 546, 637, 262,
	138, 762, 405, 138, 65, 391, 561, 405, 47, 564,
	586, 541, 263, 659, 562, 563, 127, 565, 816, 301,
	43, 575, 576, 672, 1023, 587, 886, 885, 670, 633,
	634, 679, 680, 681, 682, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, 693, 503, 816, 328, 327,
	330, 331, 332, 333, 65, 400, 557, 329, 334, 883,
	882, 850, 301, 709, 301, 640, 375, 301, 65, 256,
	657, 412, 411, 658, 19, 617, 577, 452, 374, 590,
	596, 592, 636, 868, 854, 765, 549, 698, 699, 632,
	843, 747, 748, 275, 723, 19, 401, 555, 399, 65,
	556, 639, 375, 739, 627, 716, 736, 57, 584, 249,
	870, 262, 262, 262, 262, 262, 584, 19, 40, 790,
	43, 726, 744, 274, 711, 712, 275, 262, 715, 405,
	405, 727, 518, 816, 262, 65, 618, 619, 620, 621,
	750, 43, 722, 923, 724, 725, 763, 760, 710, 751,
	375, 628, 629, 630, 735, 43, 462, 733, 407, 758,
	570, 721, 17, 43, 568, 571, 553, 753, 752, 569,
	740, 567, 40, 778, 779, 572, 566, 384, 385, 1031,
	65, 65, 405, 1026, 708, 768, 253, 254, 802, 660,
	792, 369, 1025, 732, 783, 784, 785, 731, 303, 65,
	641, 782, 773, 577, 408, 367, 1005, 844, 801, 754,
	304, 247, 673, 380, 383, 384, 385, 381, 1004, 382,
	386, 921, 672, 747, 748, 771, 767, 946, 461, 807,
	808, 809, 700, 388, 405, 380, 383, 384, 385, 381,
	369, 382, 386, 741, 250, 251, 720, 65, 730, 244,
	995, 245, 806, 47, 452, 994, 729, 966, 584, 967,
	941, 467, 49, 596, 51, 793, 398, 44, 1, 138,
	644, 477, 452, 480, 275, 706, 1006, 743, 863, 494,
	495, 496, 497, 498, 499, 500, 833, 478, 479, 476,
	482, 481, 491, 492, 484, 485, 486, 487, 488, 489,
	490, 483, 65, 65, 493, 65, 65, 815, 602, 593,
	279, 56, 601, 405, 845, 600, 862, 786, 979, 939,
	852, 831, 823, 859, 611, 775, 614, 869, 1002, 813,
	866, 138, 772, 814, 861, 138, 415, 416, 414, 841,
	418, 65, 417, 825, 826, 413, 141, 830, 877, 878,
	387, 392, 836, 402, 837, 838, 839, 840, 791, 405,
	65, 817, 638, 58, 893, 894, 795, 794, 642, 856,
	857, 858, 847, 848, 849, 285, 896, 405, 501, 900,
	897, 899, 891, 913, 138, 728, 912, 268, 592, 742,
	542, 65, 65, 739, 922, 65, 361, 65, 65, 65,
	993, 887, 65, 965, 919, 888, 920, 915, 832, 65,
	525, 673, 938, 763, 933, 934, 717, 928, 889, 314,
	663, 326, 323, 325, 324, 820, 548, 554, 65, 475,
	860, 596, 312, 596, 306, 578, 261, 945, 371, 379,
	377, 376, 266, 338, 749, 947, 745, 895, 260, 842,
	962, 1009, 552, 20, 48, 954, 255, 263, 16, 15,
	740, 14, 13, 925, 24, 12, 11, 10, 9, 968,
	739, 8, 7, 136, 6, 5, 234, 65, 4, 977,
	405, 405, 246, 405, 865, 18, 2, 0, 0, 65,
	0, 708, 0, 0, 0, 0, 0, 136, 136, 276,
	0, 452, 0, 136, 0, 0, 0, 988, 0, 0,
	0, 65, 65, 0, 990, 65, 0, 0, 996, 890,
	305, 363, 0, 0, 0, 0, 0, 0, 961, 0,
	596, 0, 949, 950, 924, 274, 0, 740, 820, 40,
	1013, 405, 138, 0, 959, 960, 0, 0, 0, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1024,
	986, 0, 0, 973, 65, 975, 976, 1029, 0, 926,
	927, 0, 136, 930, 136, 932, 932, 932, 136, 262,
	405, 0, 937, 474, 136, 0, 0, 930, 1037, 0,
	19, 41, 21, 22, 991, 0, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 0, 405, 0, 33, 0,
	969, 0, 1014, 23, 38, 39, 517, 860, 0, 951,
	952, 0, 953, 526, 0, 955, 0, 957, 0, 0,
	0, 0, 32, 0, 0, 0, 43, 301, 1016, 0,
	0, 1019, 0, 0, 0, 0, 0, 1035, 0, 0,
	0, 0, 0, 0, 0, 865, 491, 492, 484, 485,
	486, 487, 488, 489, 490, 483, 0, 405, 493, 1040,
	1041, 0, 0, 482, 481, 491, 492, 484, 485, 486,
	487, 488, 489, 490, 483, 589, 275, 493, 0, 998,
	999, 0, 0, 1000, 0, 25, 26, 28, 27, 30,
	136, 0, 0, 0, 0, 0, 0, 136, 395, 136,
	421, 0, 0, 0, 0, 0, 0, 31, 34, 35,
	0, 0, 36, 37, 29, 0, 0, 1018, 0, 136,
	0, 136, 0, 0, 136, 0, 0, 136, 0, 465,
	0, 433, 930, 0, 0, 661, 662, 0, 668, 669,
	0, 438, 439, 440, 441, 442, 443, 444, 0, 445,
	446, 447, 448, 449, 434, 435, 436, 437, 419, 420,
	0, 0, 422, 0, 423, 424, 425, 426, 427, 428,
	429, 430, 431, 432, 0, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 517, 0, 0, 713, 714, 482,
	481, 491, 492, 484, 485, 486, 487, 488, 489, 490,
	483, 0, 0, 493, 0, 0, 136, 363, 276, 136,
	136, 136, 136, 136, 0, 0, 0, 0, 0, 0,
	0, 574, 0, 0, 0, 136, 0, 0, 395, 0,
	0, 892, 136, 136, 0, 0, 0, 0, 0, 0,
	0, 276, 0, 0, 465, 0, 812, 0, 0, 0,
	759, 482, 481, 491, 492, 484, 485, 486, 487, 488,
	489, 490, 483, 0, 0, 493, 482, 481, 491, 492,
	484, 485, 486, 487, 488, 489, 490, 483, 0, 0,
	493, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 0, 136, 0, 0, 136, 481, 491, 492,
	484, 485, 486, 487, 488, 489, 490, 483, 0, 0,
	493, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 107, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 707, 465,
	0, 0, 0, 707, 707, 64, 0, 707, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 707, 707, 707, 707, 824, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 835, 707, 0, 0, 276,
	482, 481, 491, 492, 484, 485, 486, 487, 488, 489,
	490, 483, 0, 0, 493, 0, 517, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 855, 0, 0, 0,
	139, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 75, 0, 106, 99,
	0, 0, 100, 105, 88, 111, 68, 115, 109, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 112,
	113, 76, 125, 71, 120, 70, 72, 119, 96, 110,
	116, 93, 90, 69, 114, 91, 89, 85, 80, 0,
	0, 0, 108, 117, 126, 0, 0, 121, 122, 123,
	95, 73, 0, 0, 0, 0, 0, 0, 0, 0,
	917, 0, 0, 0, 0, 0, 0, 66, 0, 86,
	124, 102, 81, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 707, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	707, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 136, 0, 0, 0, 0, 0, 0, 0,
	222, 212, 185, 225, 163, 177, 233, 178, 179, 206,
	151, 193, 98, 175, 964, 166, 146, 172, 147, 164,
	187, 79, 190, 162, 214, 196, 224, 231, 87, 201,
	0, 107, 94, 0, 0, 189, 216, 191, 211, 184,
	207, 156, 200, 226, 176, 204, 227, 0, 0, 0,
	64, 0, 597, 598, 136, 0, 0, 0, 136, 74,
	0, 203, 221, 174, 205, 145, 202, 0, 149, 152,
	232, 219, 169, 170, 764, 0, 0, 0, 0, 0,
	707, 188, 192, 208, 182, 0, 465, 707, 0, 0,
	1012, 517, 0, 167, 0, 199, 0, 0, 0, 153,
	150, 0, 186, 0, 0, 0, 155, 136, 168, 209,
	0, 0, 0, 217, 183, 139, 220, 181, 180, 223,
	101, 0, 0, 0, 0, 0, 104, 0, 215, 165,
	173, 75, 171, 106, 99, 0, 198, 100, 105, 88,
	111, 68, 115, 109, 92, 83, 84, 67, 0, 103,
	78, 82, 77, 97, 112, 113, 76, 125, 71, 120,
	70, 72, 119, 96, 110, 116, 93, 90, 69, 114,
	91, 89, 85, 80, 0, 148, 0, 108, 117, 126,
	161, 218, 121, 122, 123, 95, 73, 159, 160, 157,
	158, 194, 195, 228, 229, 230, 210, 154, 0, 0,
	213, 197, 66, 0, 86, 124, 102, 81, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 222, 212, 185,
	225, 163, 177, 233, 178, 179, 206, 151, 193, 98,
	175, 276, 166, 146, 172, 147, 164, 187, 79, 190,
	162, 214, 196, 224, 231, 87, 201, 0, 107, 94,
	0, 0, 189, 216, 191, 211, 184, 207, 156, 200,
	226, 176, 204, 227, 0, 136, 0, 64, 0, 597,
	598, 0, 0, 0, 0, 0, 74, 0, 203, 221,
	174, 205, 145, 202, 0, 149, 152, 232, 219, 169,
	170, 0, 0, 0, 0, 0, 0, 0, 188, 192,
	208, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	167, 0, 199, 0, 0, 0, 153, 150, 0, 186,
	0, 0, 0, 155, 0, 168, 209, 0, 0, 0,
	217, 183, 139, 220, 181, 180, 223, 101, 0, 0,
	0, 0, 0, 104, 0, 215, 165, 173, 75, 171,
	106, 99, 0, 198, 100, 105, 88, 111, 68, 115,
	109, 92, 83, 84, 67, 0, 103, 78, 82, 77,
	97, 112, 113, 76, 125, 71, 120, 70, 72, 119,
	96, 110, 116, 93, 90, 69, 114, 91, 89, 85,
	80, 0, 148, 0, 108, 117, 126, 161, 218, 121,
	122, 123, 95, 73, 159, 160, 157, 158, 194, 195,
	228, 229, 230, 210, 154, 0, 0, 213, 197, 66,
	0, 86, 124, 102, 81, 118, 222, 212, 185, 225,
	163, 177, 233, 178, 179, 206, 151, 193, 98, 175,
	0, 166, 146, 172, 147, 164, 187, 79, 190, 162,
	214, 196, 224, 231, 87, 201, 0, 107, 94, 0,
	0, 189, 216, 191, 211, 184, 207, 156, 200, 226,
	176, 204, 227, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 203, 221, 174,
	205, 145, 202, 0, 149, 152, 232, 219, 169, 170,
	0, 0, 0, 0, 0, 0, 0, 188, 192, 208,
	182, 0, 0, 0, 0, 0, 0, 987, 0, 167,
	0, 199, 0, 0, 0, 153, 150, 0, 186, 0,
	0, 0, 155, 0, 168, 209, 0, 0, 0, 217,
	183, 139, 220, 181, 180, 223, 101, 0, 0, 0,
	0, 0, 104, 0, 215, 165, 173, 75, 171, 106,
	99, 0, 198, 100, 105, 88, 111, 68, 115, 109,
	92, 83, 84, 67, 0, 103, 78, 82, 77, 97,
	112, 113, 76, 125, 71, 120, 70, 72, 119, 96,
	110, 116, 93, 90, 69, 114, 91, 89, 85, 80,
	0, 148, 0, 108, 117, 126, 161, 218, 121, 122,
	123, 95, 73, 159, 160, 157, 158, 194, 195, 228,
	229, 230, 210, 154, 0, 0, 213, 197, 66, 0,
	86, 124, 102, 81, 118, 222, 212, 185, 225, 163,
	177, 233, 178, 179, 206, 151, 193, 98, 175, 0,
	166, 146, 172, 147, 164, 187, 79, 190, 162, 214,
	196, 224, 231, 87, 201, 0, 107, 94, 0, 0,
	189, 216, 191, 211, 184, 207, 156, 200, 226, 176,
	204, 227, 43, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 203, 221, 174, 205,
	145, 202, 0, 149, 152, 232, 219, 169, 170, 0,
	0, 0, 0, 0, 0, 0, 188, 192, 208, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 0,
	199, 0, 0, 0, 153, 150, 0, 186, 0, 0,
	0, 155, 0, 168, 209, 0, 0, 0, 217, 183,
	139, 220, 181, 180, 223, 101, 0, 0, 0, 0,
	0, 104, 0, 215, 165, 173, 75, 171, 106, 99,
	0, 198, 100, 105, 88, 111, 68, 115, 109, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 112,
	113, 76, 125, 71, 120, 70, 72, 119, 96, 110,
	116, 93, 90, 69, 114, 91, 89, 85, 80, 0,
	148, 0, 108, 117, 126, 161, 218, 121, 122, 123,
	95, 73, 159, 160, 157, 158, 194, 195, 228, 229,
	230, 210, 154, 0, 0, 213, 197, 66, 0, 86,
	124, 102, 81, 118, 222, 212, 185, 225, 163, 177,
	233, 178, 179, 206, 151, 193, 98, 175, 0, 166,
	146, 172, 147, 164, 187, 79, 190, 162, 214, 196,
	224, 231, 87, 201, 0, 107, 94, 0, 0, 189,
	216, 191, 211, 184, 207, 156, 200, 226, 176, 204,
	227, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 203, 221, 174, 205, 145,
	202, 0, 149, 152, 232, 219, 169, 170, 0, 0,
	0, 0, 0, 0, 0, 188, 192, 208, 182, 0,
	0, 0, 0, 0, 0, 898, 0, 167, 0, 199,
	0, 0, 0, 153, 150, 0, 186, 0, 0, 0,
	155, 0, 168, 209, 0, 0, 0, 217, 183, 139,
	220, 181, 180, 223, 101, 0, 0, 0, 0, 0,
	104, 0, 215, 165, 173, 75, 171, 106, 99, 0,
	198, 100, 105, 88, 111, 68, 115, 109, 92, 83,
	84, 67, 0, 103, 78, 82, 77, 97, 112, 113,
	76, 125, 71, 120, 70, 72, 119, 96, 110, 116,
	93, 90, 69, 114, 91, 89, 85, 80, 0, 148,
	0, 108, 117, 126, 161, 218, 121, 122, 123, 95,
	73, 159, 160, 157, 158, 194, 195, 228, 229, 230,
	210, 154, 0, 0, 213, 197, 66, 0, 86, 124,
	102, 81, 118, 222, 212, 185, 225, 163, 177, 233,
	178, 179, 206, 151, 193, 98, 175, 0, 166, 146,
	172, 147, 164, 187, 79, 190, 162, 214, 196, 224,
	231, 87, 201, 0, 107, 94, 0, 0, 189, 216,
	191, 211, 184, 207, 156, 200, 226, 176, 204, 227,
	0, 0, 0, 64, 0, 404, 0, 0, 0, 0,
	0, 0, 74, 0, 203, 221, 174, 205, 145, 202,
	0, 149, 152, 232, 219, 169, 170, 0, 0, 0,
	0, 0, 0, 0, 188, 192, 208, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 167, 0, 199, 0,
	0, 0, 153, 150, 0, 186, 0, 0, 0, 155,
	0, 168, 209, 0, 0, 0, 217, 183, 139, 220,
	181, 180, 223, 101, 0, 0, 0, 0, 0, 104,
	0, 215, 165, 173, 75, 171, 106, 99, 0, 198,
	100, 105, 88, 111, 68, 115, 109, 92, 83, 84,
	67, 0, 103, 78, 82, 77, 97, 112, 113, 76,
	125, 71, 120, 70, 72, 119, 96, 110, 116, 93,
	90, 69, 114, 91, 89, 85, 80, 0, 148, 0,
	108, 117, 126, 161, 218, 121, 122, 123, 95, 73,
	159, 160, 157, 158, 194, 195, 228, 229, 230, 210,
	154, 0, 0, 213, 197, 66, 0, 86, 124, 102,
	81, 118, 222, 212, 185, 225, 163, 177, 233, 178,
	179, 206, 151, 193, 98, 175, 0, 166, 146, 172,
	147, 164, 187, 79, 190, 162, 214, 196, 224, 231,
	87, 201, 0, 107, 94, 0, 0, 189, 216, 191,
	211, 184, 207, 156, 200, 226, 176, 204, 227, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 203, 221, 174, 205, 145, 202, 0,
	149, 152, 232, 219, 169, 170, 0, 0, 0, 0,
	0, 0, 0, 188, 192, 208, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 167, 0, 199, 0, 0,
	0, 153, 150, 0, 186, 0, 0, 0, 155, 0,
	168, 209, 0, 0, 0, 217, 183, 139, 220, 181,
	180, 223, 101, 0, 0, 0, 0, 0, 104, 0,
	215, 165, 173, 75, 171, 106, 99, 0, 198, 100,
	105, 88, 111, 68, 115, 109, 92, 83, 84, 67,
	0, 103, 78, 82, 77, 97, 112, 113, 76, 125,
	71, 120, 70, 72, 119, 96, 110, 116, 93, 90,
	69, 114, 91, 89, 85, 80, 0, 148, 0, 108,
	117, 126, 161, 218, 121, 122, 123, 95, 73, 159,
	160, 157, 158, 194, 195, 228, 229, 230, 210, 154,
	0, 0, 213, 197, 66, 0, 86, 124, 102, 81,
	118, 222, 212, 185, 225, 163, 177, 233, 178, 179,
	206, 151, 193, 98, 175, 0, 166, 146, 172, 147,
	164, 187, 79, 190, 162, 214, 196, 224, 231, 87,
	201, 0, 107, 94, 0, 0, 189, 216, 191, 211,
	184, 207, 156, 200, 226, 176, 204, 227, 0, 0,
	0, 277, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 203, 221, 174, 205, 145, 202, 0, 149,
	152, 232, 219, 169, 170, 0, 0, 0, 0, 0,
	0, 0, 188, 192, 208, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 167, 0, 199, 0, 0, 0,
	153, 150, 0, 186, 0, 0, 0, 155, 0, 168,
	209, 0, 0, 0, 217, 183, 139, 220, 181, 180,
	223, 101, 0, 0, 0, 0, 0, 104, 0, 215,
	165, 173, 75, 171, 106, 99, 0, 198, 100, 105,
	88, 111, 68, 115, 109, 92, 83, 84, 67, 0,
	103, 78, 82, 77, 97, 112, 113, 76, 125, 71,
	120, 70, 72, 119, 96, 110, 116, 93, 90, 69,
	114, 91, 89, 85, 80, 0, 148, 0, 108, 117,
	126, 161, 218, 121, 122, 123, 95, 73, 159, 160,
	157, 158, 194, 195, 228, 229, 230, 210, 154, 0,
	0, 213, 197, 66, 0, 86, 124, 102, 81, 118,
	222, 212, 185, 225, 163, 177, 233, 178, 179, 206,
	151, 193, 98, 175, 0, 166, 146, 172, 147, 164,
	187, 79, 190, 162, 214, 196, 224, 231, 87, 201,
	0, 107, 94, 0, 0, 189, 216, 191, 211, 184,
	207, 156, 200, 226, 176, 204, 227, 0, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 203, 221, 174, 205, 145, 202, 0, 149, 152,
	232, 219, 169, 170, 0, 0, 0, 0, 0, 0,
	0, 188, 192, 208, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 167, 0, 199, 0, 0, 0, 153,
	150, 0, 186, 0, 0, 0, 155, 0, 168, 209,
	0, 0, 0, 217, 183, 139, 220, 181, 180, 223,
	101, 0, 0, 0, 0, 0, 104, 0, 215, 165,
	173, 75, 171, 106, 99, 0, 198, 100, 105, 88,
	111, 68, 115, 109, 92, 83, 84, 67, 0, 103,
	78, 82, 77, 97, 112, 113, 76, 125, 71, 120,
	70, 72, 119, 96, 110, 116, 93, 90, 69, 114,
	91, 89, 85, 80, 0, 148, 0, 108, 117, 126,
	161, 218, 121, 122, 123, 95, 73, 159, 160, 157,
	158, 194, 195, 228, 229, 230, 210, 154, 0, 0,
	213, 197, 66, 0, 86, 124, 102, 81, 118, 222,
	212, 185, 225, 163, 177, 233, 178, 179, 206, 151,
	193, 98, 175, 0, 166, 146, 172, 147, 164, 187,
	79, 190, 162, 214, 196, 224, 231, 87, 201, 0,
	107, 94, 0, 0, 189, 216, 191, 211, 184, 207,
	156, 200, 226, 176, 204, 227, 0, 0, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	203, 221, 174, 205, 145, 202, 0, 149, 152, 232,
	219, 169, 170, 0, 0, 0, 0, 0, 0, 0,
	188, 192, 208, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 167, 0, 199, 0, 0, 0, 153, 150,
	0, 186, 0, 0, 0, 155, 0, 168, 209, 0,
	0, 0, 217, 183, 139, 220, 181, 180, 223, 101,
	0, 0, 0, 0, 0, 104, 0, 215, 165, 173,
	75, 171, 106, 99, 0, 198, 100, 105, 88, 111,
	68, 115, 109, 92, 83, 84, 67, 0, 103, 78,
	82, 77, 97, 112, 113, 76, 125, 71, 120, 70,
	72, 119, 96, 110, 116, 93, 90, 69, 114, 91,
	89, 85, 80, 0, 148, 0, 108, 117, 126, 161,
	218, 121, 122, 123, 95, 73, 159, 160, 157, 158,
	194, 195, 228, 229, 230, 210, 154, 0, 0, 213,
	197, 66, 0, 86, 124, 102, 81, 118, 98, 0,
	0, 702, 0, 310, 0, 0, 0, 79, 0, 309,
	0, 0, 0, 348, 87, 0, 0, 107, 94, 0,
	0, 0, 0, 341, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 277, 328, 327, 330,
	331, 332, 333, 0, 0, 74, 329, 334, 335, 336,
	0, 0, 307, 321, 0, 347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 318, 319, 705, 0, 0,
	0, 359, 0, 320, 0, 0, 316, 317, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 357, 0, 101, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 75, 0, 106,
	99, 0, 0, 100, 105, 88, 111, 68, 115, 109,
	92, 83, 84, 67, 0, 103, 78, 82, 77, 97,
	112, 113, 76, 125, 71, 120, 70, 72, 119, 96,
	110, 116, 93, 90, 69, 114, 91, 89, 85, 80,
	0, 0, 0, 108, 117, 126, 0, 0, 121, 122,
	123, 95, 73, 349, 358, 355, 356, 353, 354, 352,
	351, 350, 360, 343, 344, 346, 0, 345, 66, 0,
	86, 124, 102, 81, 118, 98, 0, 0, 0, 0,
	310, 0, 0, 0, 79, 0, 309, 0, 0, 0,
	348, 87, 0, 0, 107, 94, 0, 0, 0, 0,
	341, 342, 0, 0, 0, 0, 0, 0, 0, 0,
	43, 0, 0, 277, 328, 327, 330, 331, 332, 333,
	0, 0, 74, 329, 334, 335, 336, 0, 0, 307,
	321, 0, 347, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 318, 319, 705, 0, 0, 0, 359, 0,
	320, 0, 0, 316, 317, 322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 357, 0, 101, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 75, 0, 106, 99, 0, 0,
	100, 105, 88, 111, 68, 115, 109, 92, 83, 84,
	67, 0, 103, 78, 82, 77, 97, 112, 113, 76,
	125, 71, 120, 70, 72, 119, 96, 110, 116, 93,
	90, 69, 114, 91, 89, 85, 80, 0, 0, 0,
	108, 117, 126, 0, 0, 121, 122, 123, 95, 73,
	349, 358, 355, 356, 353, 354, 352, 351, 350, 360,
	343, 344, 346, 0, 345, 66, 0, 86, 124, 102,
	81, 118, 98, 0, 0, 0, 0, 310, 0, 0,
	0, 79, 0, 309, 0, 0, 0, 348, 87, 0,
	0, 107, 94, 0, 0, 0, 0, 341, 342, 0,
	0, 0, 0, 0, 0, 0, 0, 43, 0, 301,
	277, 328, 327, 330, 331, 332, 333, 0, 0, 74,
	329, 334, 335, 336, 0, 0, 307, 321, 0, 347,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 318,
	319, 0, 0, 0, 0, 359, 0, 320, 0, 0,
	316, 317, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 357, 0,
	101, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 75, 0, 106, 99, 0, 0, 100, 105, 88,
	111, 68, 115, 109, 92, 83, 84, 67, 0, 103,
	78, 82, 77, 97, 112, 113, 76, 125, 71, 120,
	70, 72, 119, 96, 110, 116, 93, 90, 69, 114,
	91, 89, 85, 80, 0, 0, 0, 108, 117, 126,
	0, 0, 121, 122, 123, 95, 73, 349, 358, 355,
	356, 353, 354, 352, 351, 350, 360, 343, 344, 346,
	19, 345, 66, 0, 86, 124, 102, 81, 118, 0,
	0, 98, 0, 0, 0, 0, 310, 0, 0, 0,
	79, 0, 309, 0, 0, 0, 348, 87, 0, 0,
	107, 94, 0, 0, 0, 0, 341, 342, 0, 0,
	0, 0, 0, 0, 0, 0, 43, 0, 0, 277,
	328, 327, 330, 331, 332, 333, 0, 0, 74, 329,
	334, 335, 336, 0, 0, 307, 321, 0, 347, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 318, 319,
	0, 0, 0, 0, 359, 0, 320, 0, 0, 316,
	317, 322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 357, 0, 101,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	75, 0, 106, 99, 0, 0, 100, 105, 88, 111,
	68, 115, 109, 92, 83, 84, 67, 0, 103, 78,
	82, 77, 97, 112, 113, 76, 125, 71, 120, 70,
	72, 119, 96, 110, 116, 93, 90, 69, 114, 91,
	89, 85, 80, 0, 0, 0, 108, 117, 126, 0,
	0, 121, 122, 123, 95, 73, 349, 358, 355, 356,
	353, 354, 352, 351, 350, 360, 343, 344, 346, 0,
	345, 66, 0, 86, 124, 102, 81, 118, 98, 0,
	0, 0, 0, 310, 0, 0, 0, 79, 0, 309,
	0, 0, 0, 348, 87, 0, 0, 107, 94, 0,
	0, 0, 0, 341, 342, 0, 0, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 277, 328, 327, 330,
	331, 332, 333, 0, 0, 74, 329, 334, 335, 336,
	0, 0, 307, 321, 0, 347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 318, 319, 0, 0, 0,
	0, 359, 0, 320, 0, 0, 316, 317, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 357, 0, 101, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 75, 0, 106,
	99, 0, 0, 100, 105, 88, 111, 68, 115, 109,
	92, 83, 84, 67, 0, 103, 78, 82, 77, 97,
	112, 113, 76, 125, 71, 120, 70, 72, 119, 96,
	110, 116, 93, 90, 69, 114, 91, 89, 85, 80,
	0, 0, 0, 108, 117, 126, 0, 0, 121, 122,
	123, 95, 73, 349, 358, 355, 356, 353, 354, 352,
	351, 350, 360, 343, 344, 346, 98, 345, 66, 0,
	86, 124, 102, 81, 118, 79, 0, 0, 0, 0,
	0, 348, 87, 0, 0, 107, 94, 0, 0, 0,
	0, 341, 342, 0, 0, 0, 0, 0, 0, 0,
	0, 43, 0, 0, 277, 328, 327, 330, 331, 332,
	333, 0, 0, 74, 329, 334, 335, 336, 0, 0,
	0, 321, 0, 347, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 318, 319, 0, 0, 0, 0, 359,
	0, 320, 0, 0, 316, 317, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 357, 0, 101, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 75, 0, 106, 99, 0,
	1038, 100, 105, 88, 111, 68, 115, 109, 92, 83,
	84, 67, 0, 103, 78, 82, 77, 97, 112, 113,
	76, 125, 71, 120, 70, 72, 119, 96, 110, 116,
	93, 90, 69, 114, 91, 89, 85, 80, 0, 0,
	0, 108, 117, 126, 0, 0, 121, 122, 123, 95,
	73, 349, 358, 355, 356, 353, 354, 352, 351, 350,
	360, 343, 344, 346, 98, 345, 66, 0, 86, 124,
	102, 81, 118, 79, 0, 0, 0, 0, 0, 348,
	87, 0, 0, 107, 94, 0, 0, 0, 0, 341,
	342, 0, 0, 0, 0, 0, 0, 0, 0, 43,
	0, 0, 277, 328, 327, 330, 331, 332, 333, 0,
	0, 74, 329, 334, 335, 336, 0, 0, 0, 321,
	0, 347, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 318, 319, 0, 0, 0, 0, 359, 0, 320,
	0, 0, 316, 317, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 139, 0, 0,
	357, 0, 101, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 75, 0, 106, 99, 0, 0, 100,
	105, 88, 111, 68, 115, 109, 92, 83, 84, 67,
	0, 103, 78, 82, 77, 97, 112, 113, 76, 125,
	71, 120, 70, 72, 119, 96, 110, 116, 93, 90,
	69, 114, 91, 89, 85, 80, 0, 0, 0, 108,
	117, 126, 0, 0, 121, 122, 123, 95, 73, 349,
	358, 355, 356, 353, 354, 352, 351, 350, 360, 343,
	344, 346, 0, 345, 66, 0, 86, 124, 102, 81,
	118, 98, 0, 0, 0, 819, 0, 0, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	107, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 821, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 470, 469, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	471, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	75, 0, 106, 99, 0, 0, 100, 105, 88, 111,
	68, 115, 109, 92, 83, 84, 67, 0, 103, 78,
	82, 77, 97, 112, 113, 76, 125, 71, 120, 70,
	72, 119, 96, 110, 116, 93, 90, 69, 114, 91,
	89, 85, 80, 0, 0, 0, 108, 117, 126, 98,
	0, 121, 122, 123, 95, 73, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 107, 94,
	0, 66, 0, 86, 124, 102, 81, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 59, 0, 0, 0, 62, 101, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 75, 0,
	106, 99, 0, 0, 100, 105, 88, 111, 68, 115,
	109, 92, 83, 84, 67, 0, 103, 78, 82, 77,
	97, 112, 113, 76, 125, 71, 120, 70, 72, 119,
	96, 110, 116, 93, 90, 69, 114, 91, 89, 85,
	80, 0, 0, 0, 108, 117, 126, 0, 0, 121,
	122, 123, 95, 73, 0, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 66,
	0, 86, 124, 102, 81, 118, 79, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 107, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 43, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 75, 0, 106, 99,
	0, 0, 100, 105, 88, 111, 68, 115, 109, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 112,
	113, 76, 125, 71, 120, 70, 72, 119, 96, 110,
	116, 93, 90, 69, 114, 91, 89, 85, 80, 0,
	0, 0, 108, 117, 126, 0, 0, 121, 122, 123,
	95, 73, 0, 0, 19, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 66, 0, 86,
	124, 102, 81, 118, 79, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 107, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	43, 0, 0, 137, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 75, 0, 106, 99, 0, 0,
	100, 105, 88, 111, 68, 115, 109, 92, 83, 84,
	67, 0, 103, 78, 82, 77, 97, 112, 113, 76,
	125, 71, 120, 70, 72, 119, 96, 110, 116, 93,
	90, 69, 114, 91, 89, 85, 80, 0, 0, 0,
	108, 117, 126, 98, 0, 121, 122, 123, 95, 73,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 107, 94, 0, 66, 0, 86, 124, 102,
	81, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 550, 0, 0, 551, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 75, 0, 106, 99, 0, 0, 100, 105,
	88, 111, 68, 115, 109, 92, 83, 84, 67, 0,
	103, 78, 82, 77, 97, 112, 113, 76, 125, 71,
	120, 70, 72, 119, 96, 110, 116, 93, 90, 69,
	114, 91, 89, 85, 80, 0, 0, 0, 108, 117,
	126, 0, 0, 121, 122, 123, 95, 73, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 394,
	0, 0, 0, 66, 79, 86, 124, 102, 81, 118,
	0, 87, 0, 0, 107, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 137, 0, 396, 0, 0, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 75, 0, 106, 99, 0, 0,
	100, 105, 88, 111, 68, 115, 109, 92, 83, 84,
	67, 0, 103, 78, 82, 77, 97, 112, 113, 76,
	125, 71, 120, 70, 72, 119, 96, 110, 116, 93,
	90, 69, 114, 91, 89, 85, 80, 0, 0, 0,
	108, 117, 126, 98, 0, 121, 122, 123, 95, 73,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 107, 94, 0, 66, 0, 86, 124, 102,
	81, 118, 0, 0, 0, 0, 0, 0, 43, 0,
	0, 137, 0, 0, 0, 0, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 139, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 75, 0, 106, 99, 0, 0, 100, 105,
	88, 111, 68, 115, 109, 92, 83, 84, 67, 0,
	103, 78, 82, 77, 97, 112, 113, 76, 125, 71,
	120, 70, 72, 119, 96, 110, 116, 93, 90, 69,
	114, 91, 89, 85, 80, 0, 0, 0, 108, 117,
	126, 98, 0, 121, 122, 123, 95, 73, 0, 0,
	79, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	107, 94, 0, 66, 0, 86, 124, 102, 81, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 821, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	75, 0, 106, 99, 0, 0, 100, 105, 88, 111,
	68, 115, 109, 92, 83, 84, 67, 0, 103, 78,
	82, 77, 97, 112, 113, 76, 125, 71, 120, 70,
	72, 119, 96, 110, 116, 93, 90, 69, 114, 91,
	89, 85, 80, 0, 0, 0, 108, 117, 126, 98,
	0, 121, 122, 123, 95, 73, 0, 0, 79, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 107, 94,
	0, 66, 0, 86, 124, 102, 81, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 137, 0, 396,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 139, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 75, 0,
	106, 99, 0, 0, 100, 105, 88, 111, 68, 115,
	109, 92, 83, 84, 67, 0, 103, 78, 82, 77,
	97, 112, 113, 76, 125, 71, 120, 70, 72, 119,
	96, 110, 116, 93, 90, 69, 114, 91, 89, 85,
	80, 0, 0, 0, 108, 117, 126, 98, 0, 121,
	122, 123, 95, 73, 0, 372, 79, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 107, 94, 0, 66,
	0, 86, 124, 102, 81, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 137, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 75, 0, 106, 99,
	0, 0, 100, 105, 88, 111, 68, 115, 109, 92,
	83, 84, 67, 0, 103, 78, 82, 77, 97, 112,
	113, 76, 125, 71, 120, 70, 72, 119, 96, 110,
	116, 93, 90, 69, 114, 91, 89, 85, 80, 265,
	0, 0, 108, 117, 126, 0, 98, 121, 122, 123,
	95, 73, 0, 0, 0, 79, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 107, 94, 66, 0, 86,
	124, 102, 81, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 75, 0, 106, 99, 0,
	0, 100, 105, 88, 111, 68, 115, 109, 92, 83,
	84, 67, 0, 103, 78, 82, 77, 97, 112, 113,
	76, 125, 71, 120, 70, 72, 119, 96, 110, 116,
	93, 90, 69, 114, 91, 89, 85, 80, 0, 0,
	0, 108, 117, 126, 98, 0, 121, 122, 123, 95,
	73, 0, 0, 79, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 107, 94, 0, 66, 0, 86, 124,
	102, 81, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 134, 0, 139, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 75, 0, 106, 99, 0, 0, 100,
	105, 88, 111, 68, 115, 109, 92, 83, 84, 67,
	0, 103, 78, 82, 77, 97, 112, 113, 76, 125,
	71, 120, 70, 72, 119, 96, 110, 116, 93, 90,
	69, 114, 91, 89, 85, 80, 0, 0, 0, 108,
	117, 126, 98, 0, 121, 122, 123, 95, 73, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 107, 94, 0, 66, 0, 86, 124, 102, 81,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 75, 0, 106, 99, 0, 0, 100, 105, 88,
	111, 68, 115, 109, 92, 83, 84, 67, 0, 103,
	78, 82, 77, 97, 112, 113, 76, 125, 71, 120,
	70, 72, 119, 96, 110, 116, 93, 90, 69, 114,
	91, 89, 85, 80, 0, 0, 0, 108, 117, 126,
	98, 0, 121, 122, 123, 95, 73, 0, 0, 79,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 107,
	94, 0, 66, 0, 86, 124, 102, 81, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 139, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 75,
	0, 106, 99, 0, 0, 100, 105, 88, 111, 68,
	115, 109, 92, 83, 84, 67, 0, 103, 78, 82,
	77, 97, 112, 113, 76, 125, 71, 120, 70, 72,
	119, 96, 110, 116, 93, 90, 69, 114, 91, 89,
	85, 80, 0, 0, 0, 108, 117, 126, 98, 0,
	121, 122, 123, 95, 73, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 107, 94, 0,
	66, 0, 86, 124, 102, 81, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 75, 0, 106,
	99, 0, 0, 100, 105, 88, 111, 68, 115, 109,
	92, 83, 84, 67, 0, 103, 78, 82, 77, 97,
	112, 113, 76, 125, 71, 120, 70, 72, 119, 96,
	110, 116, 93, 90, 69, 114, 91, 89, 85, 80,
	0, 0, 0, 108, 117, 126, 98, 0, 121, 122,
	123, 95, 73, 0, 0, 79, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 107, 94, 0, 66, 0,
	86, 124, 102, 81, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 75, 0, 106, 99, 0,
	0, 100, 105, 88, 111, 68, 115, 109, 92, 83,
	84, 67, 0, 103, 78, 82, 77, 97, 112, 113,
	76, 125, 71, 120, 70, 271, 119, 96, 110, 116,
	93, 90, 69, 114, 91, 89, 85, 80, 0, 0,
	0, 108, 117, 126, 0, 0, 121, 122, 123, 272,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 66, 0, 86, 124,
	102, 81, 118,
}
var yyPact = [...]int{

	1044, -1000, -166, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 699, 717, -1000,
	-1000, -1000, -1000, -1000, 515, 5252, -7, 24, 28, 6987,
	22, 3524, 7323, -1000, -1000, -1000, -1000, -1000, -111, -114,
	549, -1000, -1000, -1000, -1000, -1000, 693, 696, 563, 685,
	608, -1000, -10, 6146, 6819, 7659, -1000, 314, 15, 7323,
	-133, -12, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 18, 7323, -1000,
	7323, -17, 308, -17, 7323, -1000, 69, -1000, -1000, -1000,
	7323, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 318, 640, 4511, 4511, 699, -1000, 549, -1000,
	-1000, -1000, 631, -1000, -1000, 165, 6650, 509, 655, -1000,
	-1000, -1000, 672, 5628, 5978, 7323, 505, -1000, 2688, 357,
	-1000, 635, -1000, -1000, 133, -1000, 67, -1000, -1000, 478,
	-1000, 1065, 283, 2270, 1, 7323, 151, 7323, 2270, -5,
	7323, 666, 566, 7323, -1000, 3315, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 713, 82, 242, -1000, 4511, 660, 428,
	428, -1000, -1000, 59, -1000, -1000, 4887, 4887, 4887, 4887,
	4887, 4887, 4887, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 428, 66, -1000,
	4314, 428, 428, 428, 428, 428, 428, 4511, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 418, -1000, 231, 693, 318, 608, 5796, 585, -1000,
	-1000, 528, 7323, -1000, 7491, 6146, 6146, 6146, 6146, 6146,
	-1000, 596, 591, -1000, 584, 580, 595, 7323, -1000, 473,
	318, 5628, 60, -1000, 6482, -1000, -1000, 707, 6146, 7323,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 7491, -1000, 4511,
	3106, 1852, 83, 177, -96, -1000, -1000, 483, -1000, 483,
	483, 483, 483, -72, -72, -72, -72, -1000, -1000, -1000,
	-1000, -1000, 512, -1000, 483, 483, 483, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 497, 497, 497, 490, 490,
	510, -1000, -1000, -1000, 7323, -1000, 638, 37, -1000, 7323,
	-1000, -1000, 7323, 2270, -1000, -1000, -1000, -1000, 613, 4511,
	4511, 299, 4511, 4511, 97, 4887, 183, 164, 4887, 4887,
	4887, 4887, 4887, 4887, 4887, 4887, 4887, 4887, 4887, 4887,
	4887, 4887, 4887, 203, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 270, -1000, 549, 452, 452, 93, 93, 93,
	93, 93, 93, 1370, 3721, 3106, 470, 285, 4314, 3918,
	3918, 4511, 4511, 3918, 680, 143, 285, 7155, -1000, 318,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3918, 3918, 3918,
	3918, 4511, -1000, -1000, -1000, 640, -1000, 680, 698, -1000,
	625, 621, 3918, -1000, 564, 7491, 428, -1000, 5440, -1000,
	565, 655, 501, 550, 633, -1000, -1000, -1000, -1000, 588,
	-1000, 587, -1000, -1000, -1000, -1000, -1000, 318, -1000, 13,
	7, 5, -1000, 699, 4511, 557, -1000, -1000, -1000, 285,
	-1000, 65, -1000, 408, 1635, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 493, 258, -1000, 659, 110, 255, 658, -1000,
	-1000, 634, -1000, 160, -103, -1000, -1000, 210, -72, -72,
	-1000, -1000, 77, 632, 77, 77, 77, 240, -1000, -1000,
	-1000, -1000, 209, -1000, -1000, -1000, 205, -1000, 529, 7155,
	2270, -1000, -1000, 112, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -39, -1000, 2270, -1000,
	611, 97, 128, -1000, -1000, 204, -1000, -1000, 285, 285,
	1169, -1000, -1000, -1000, -1000, 183, 4887, 4887, 4887, 249,
	1169, 1246, 1024, 1276, 93, 179, 179, 105, 105, 105,
	105, 105, 92, 92, -1000, -1000, -1000, 318, -1000, -1000,
	-1000, 318, 3918, 395, -1000, -1000, 5084, 64, 428, 4511,
	-1000, 425, 425, 234, 305, 425, 3918, 148, -1000, 4511,
	318, -1000, 425, 318, 425, 425, -1000, -1000, 7323, -1000,
	-1000, -1000, -1000, 540, -1000, 641, 348, 360, -1000, -1000,
	4115, 318, 468, 62, 699, -1000, -1000, 4511, 492, -1000,
	4511, -1000, -1000, -1000, -1000, 428, 428, 428, 693, 285,
	-1000, 2897, 1852, -1000, 1852, 7155, -25, -1000, 250, -1000,
	-1000, 491, 520, 27, -1000, -1000, -1000, 340, 77, 77,
	-1000, 247, 139, -1000, -1000, -1000, 466, -1000, 393, 433,
	7323, -1000, -1000, -1000, 7323, -1000, -1000, -1000, -1000, -1000,
	7155, -1000, -1000, -1000, -1000, -1000, -1000, 249, 1169, 1231,
	-1000, 4887, 4887, -1000, -1000, 425, 3918, -1000, -1000, 6314,
	-1000, -1000, 2479, 3918, 285, -1000, -1000, 79, 203, 79,
	-144, 454, 138, -1000, 4511, 223, -1000, -1000, -1000, -1000,
	-1000, -1000, 707, 6146, 654, -1000, 428, -1000, -1000, 571,
	7155, 7155, 693, 285, 7155, 285, 7155, 7155, 7155, -1000,
	-1000, 1635, -1000, 328, -1000, 483, -1000, -1000, 7155, -92,
	712, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 233, 188, -1000, 174, 2270, -1000, -1000,
	662, -1000, 4887, 1169, 1169, -1000, -1000, -1000, -1000, 58,
	318, 318, 483, 483, -1000, 483, 490, -1000, 483, -55,
	483, -56, 318, 318, 428, -138, -1000, 285, 4511, 705,
	391, 711, -1000, 428, -1000, 549, 35, -1000, -1000, 306,
	-1000, 298, -1000, 298, 298, -1000, 7155, -1000, 265, 96,
	-1000, -123, -1000, 336, 333, -1000, 428, 1169, 2061, -1000,
	-1000, -1000, 34, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 4887, 318, 224, 285, 702, 695, 7491, 360, 318,
	7155, 7155, -1000, -1000, 7155, -1000, -1000, -1000, -27, 166,
	651, -1000, 639, -1000, -1000, -1000, -40, -1000, -1000, -1000,
	63, -1000, -1000, -1000, 4511, 4511, 357, -1000, -1000, -1000,
	-1000, 7323, -1000, 217, -1000, -1000, 262, -1000, 7155, 318,
	19, -152, 285, 343, 432, -1000, -1000, -40, 620, -1000,
	606, -147, -159, 7155, -1000, -45, -1000, 602, -1000, 254,
	-47, -149, -1000, 428, -153, 4699, -163, 1043, 318, -1000,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 946, 144, 622, 945, 942, 938, 935, 934, 932,
	931, 928, 927, 926, 925, 924, 922, 921, 919, 918,
	56, 916, 914, 913, 40, 912, 71, 911, 910, 34,
	64, 15, 19, 735, 909, 22, 90, 97, 908, 44,
	906, 904, 902, 901, 50, 900, 899, 70, 898, 896,
	895, 16, 21, 894, 892, 889, 887, 41, 12, 886,
	884, 883, 882, 881, 880, 36, 4, 5, 6, 7,
	879, 195, 27, 876, 28, 870, 868, 863, 860, 35,
	856, 39, 850, 24, 45, 849, 3, 37, 10, 847,
	46, 845, 476, 838, 107, 835, 828, 827, 826, 823,
	822, 25, 0, 178, 128, 20, 821, 813, 903, 18,
	47, 811, 810, 82, 9, 17, 13, 806, 805, 802,
	800, 798, 797, 796, 176, 792, 788, 787, 14, 29,
	786, 785, 42, 8, 784, 779, 778, 777, 43, 775,
	772, 38, 771, 770, 769, 31, 11, 768, 2, 738,
	23, 736, 1, 730, 728, 727, 73, 91, 726, 724,
	52,
}
var yyR1 = [...]int{

	0, 154, 155, 155, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 3, 4, 4, 5, 5, 6, 6, 23,
	23, 7, 8, 8, 158, 158, 42, 42, 9, 9,
	89, 89, 89, 107, 107, 10, 10, 10, 10, 15,
	142, 143, 143, 143, 143, 138, 118, 118, 118, 121,
	121, 119, 119, 119, 119, 119, 119, 119, 120, 120,
	120, 120, 120, 122, 122, 122, 122, 122, 123, 123,
	123, 123, 123, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 137, 137, 124, 124, 132, 132, 133, 133,
	133, 130, 130, 131, 131, 134, 134, 134, 125, 125,
	125, 125, 125, 125, 127, 127, 135, 135, 128, 128,
	128, 129, 129, 136, 136, 136, 136, 136, 126, 126,
	139, 147, 147, 147, 147, 141, 141, 149, 149, 148,
	140, 140, 150, 144, 144, 144, 145, 145, 145, 146,
	146, 146, 11, 11, 11, 11, 11, 153, 151, 151,
	152, 152, 12, 13, 13, 13, 14, 14, 16, 117,
	117, 117, 17, 18, 18, 19, 19, 19, 19, 19,
	19, 19, 159, 20, 21, 21, 22, 22, 22, 26,
	26, 26, 24, 24, 25, 25, 31, 31, 30, 30,
	32, 32, 32, 32, 106, 106, 106, 105, 105, 34,
	34, 35, 35, 36, 36, 37, 37, 37, 49, 86,
	86, 38, 38, 38, 38, 39, 39, 40, 40, 41,
	41, 112, 112, 111, 111, 111, 110, 110, 43, 43,
	43, 45, 44, 44, 44, 44, 46, 46, 48, 48,
	47, 47, 50, 50, 50, 50, 51, 51, 52, 52,
	33, 33, 33, 33, 33, 33, 33, 93, 93, 54,
	54, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 64, 64, 64, 64, 64, 64, 55, 55, 55,
	55, 55, 55, 55, 29, 29, 65, 65, 65, 71,
	66, 66, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 62, 62, 62, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 61, 61, 61, 61, 61,
	61, 61, 61, 160, 160, 63, 63, 63, 63, 27,
	27, 27, 27, 27, 115, 115, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 75,
	75, 28, 28, 73, 73, 74, 76, 76, 72, 72,
	72, 57, 57, 57, 57, 57, 57, 57, 57, 59,
	59, 59, 77, 77, 78, 78, 79, 79, 80, 80,
	81, 82, 82, 82, 83, 83, 83, 83, 84, 84,
	84, 56, 56, 56, 56, 56, 56, 85, 85, 85,
	85, 87, 87, 67, 67, 69, 69, 68, 70, 88,
	88, 90, 91, 91, 94, 94, 95, 95, 92, 92,
	96, 96, 96, 96, 96, 96, 96, 96, 96, 96,
	96, 97, 97, 97, 98, 98, 99, 99, 99, 100,
	100, 103, 103, 104, 104, 108, 108, 109, 109, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	156, 157, 113, 114, 114, 114,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 7, 10, 1, 3, 1, 3, 6, 7, 1,
	1, 8, 7, 6, 1, 1, 1, 3, 5, 3,
	1, 2, 1, 1, 1, 2, 8, 4, 6, 4,
	4, 1, 3, 3, 3, 8, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 1, 4, 4,
	2, 2, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 4, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	2, 2, 2, 2, 0, 3, 0, 1, 0, 3,
	3, 0, 2, 0, 2, 1, 2, 1, 0, 2,
	4, 2, 3, 2, 2, 1, 1, 1, 3, 2,
	3, 1, 10, 0, 1, 3, 1, 2, 3, 1,
	1, 1, 6, 7, 7, 4, 5, 7, 1, 3,
	8, 8, 5, 4, 6, 5, 3, 2, 3, 1,
	1, 1, 3, 2, 1, 2, 2, 2, 2, 2,
	3, 3, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 0, 5, 5, 5, 1, 3, 0, 2,
	1, 3, 3, 2, 3, 1, 2, 0, 3, 1,
	1, 3, 3, 4, 4, 5, 3, 4, 5, 6,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 2, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 9, 7, 5, 4, 2, 2, 2, 2, 2,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 1, 0, 2, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 1, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -154, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -16, -17, -18, -19, -3, -4, 6,
	-23, 8, 9, 29, -15, 111, 112, 114, 113, 140,
	115, 133, 48, 24, 134, 135, 138, 139, 30, 31,
	-156, 7, 201, 52, -155, 214, -79, 14, -22, 5,
	-20, -159, -20, -20, -20, -20, -142, 52, -99, 120,
	69, 118, 124, -103, 55, -102, 207, 152, 146, 173,
	165, 163, 166, 191, 64, 136, 161, 157, 155, 26,
	178, 212, 156, 150, 151, 177, 209, 33, 144, 176,
	172, 175, 149, 171, 37, 190, 168, 158, 17, 139,
	142, 125, 211, 154, 131, 143, 138, 36, 182, 148,
	169, 145, 159, 160, 174, 147, 170, 183, 213, 167,
	164, 187, 188, 189, 210, 162, 184, -92, 120, 122,
	118, 118, 119, 120, 118, -47, -108, 55, -102, 120,
	118, -117, 55, -101, -102, 70, 21, 23, 180, 73,
	105, 15, 74, 104, 202, 111, 46, 194, 195, 192,
	193, 185, 28, 9, 24, 134, 20, 98, 113, 77,
	78, 137, 22, 135, 68, 18, 49, 10, 12, 13,
	123, 122, 89, 119, 44, 7, 107, 25, 86, 40,
	27, 42, 87, 16, 196, 197, 30, 206, 141, 100,
	47, 34, 71, 66, 50, 69, 14, 45, 88, 114,
	201, 43, 6, 205, 29, 133, 41, 118, 186, 76,
	121, 67, 5, 124, 31, 8, 48, 51, 198, 199,
	200, 32, 75, 11, -108, -113, -113, -113, -113, -113,
	186, 186, -2, -83, 16, 15, -5, -3, -156, 6,
	19, 20, -26, 38, 39, -21, -92, -35, -36, -37,
	-38, -49, -71, -156, -47, 10, -42, -47, -89, -88,
	191, 166, 190, -90, -72, -103, -108, 55, -102, -143,
	-138, 55, 119, -47, 201, -95, 123, 118, -47, -47,
	-94, 123, 55, -94, -47, 108, -47, -113, -113, -113,
	-157, 54, -84, 18, 30, -33, -53, 71, -58, 28,
	22, -57, -54, -72, -70, -71, 105, 106, 94, 95,
	102, 72, 107, -62, -60, -61, -63, 57, 56, 65,
	58, 59, 60, 61, 66, 67, 68, -103, -108, -68,
	-156, 42, 43, 202, 203, 206, 204, 74, 32, 192,
	200, 199, 198, 196, 197, 194, 195, 123, 193, 100,
	201, -80, -81, -33, -79, -2, -20, 34, -24, 20,
	63, -48, 25, -47, 29, 53, -43, -45, -44, -46,
	40, 44, 46, 41, 42, 43, 47, -112, 21, -35,
	-2, -156, -111, -110, 21, -108, 57, -47, -158, 53,
	10, 51, -107, -104, 57, -103, -101, 53, 29, 79,
	108, 54, 53, -118, -121, -123, -122, -119, -120, 163,
	164, 105, 167, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 136, 159, 160, 161, 162, 146, 147,
	148, 149, 150, 151, 152, 154, 155, 156, 157, 158,
	55, -114, -156, -104, 120, -47, 71, -47, -114, 121,
	-47, 22, 50, -47, -109, -108, -101, 8, 89, 70,
	69, 86, 53, 17, -33, -55, 89, 71, 87, 88,
	73, 91, 90, 101, 94, 95, 96, 97, 98, 99,
	100, 92, 93, 104, 79, 80, 81, 82, 83, 84,
	85, -93, -156, -71, -156, 109, 110, -58, -58, -58,
	-58, -58, -58, -58, -156, 108, -66, -33, -156, -156,
	-156, -156, -156, -156, -156, -75, -33, -156, -160, -156,
	-160, -160, -160, -160, -160, -160, -160, -156, -156, -156,
	-156, 53, -82, 23, 24, -83, -157, -26, -59, -103,
	58, 61, -25, 41, -56, 29, 32, -2, -156, -47,
	-88, -36, -37, -37, -36, -37, 40, 40, 40, 45,
	40, 45, 40, -44, -108, -157, -157, -2, -50, 48,
	122, 49, -110, -52, 11, -35, -47, -113, -90, -33,
	-104, -109, -101, -144, -145, -146, -104, 57, 58, -138,
	-139, -140, -147, 127, -150, 125, 124, -141, 130, 119,
	27, -134, 66, 71, -130, 183, -124, 52, -124, -124,
	-124, -124, -128, 166, -128, -128, -128, 52, -124, -124,
	-124, -132, 52, -132, -132, -133, 52, -133, -100, 51,
	-47, 22, -96, 114, -153, 112, 180, 166, 64, 28,
	113, 14, 202, 142, 213, 55, 143, -47, -47, -114,
	36, -33, -33, -64, 66, 71, 67, 68, -33, -33,
	-58, -65, -68, -71, 62, 89, 87, 88, 73, -58,
	-58, -58, -58, -58, -58, -58, -58, -58, -58, -58,
	-58, -58, -58, -58, -115, 55, 57, 55, -57, -57,
	-103, -31, 20, -30, -32, 96, -33, -108, -104, 53,
	-157, -30, -30, -33, -33, -30, -24, -73, -74, 75,
	-103, -157, -30, -31, -30, -30, -81, -84, -91, 18,
	10, 32, 32, -30, -87, 50, -88, -67, -69, -68,
	-156, -2, -85, -103, -52, -40, -39, 50, 51, -41,
	50, -39, 40, 40, -157, 119, 119, 119, -79, -33,
	-52, 108, 53, -146, 79, 52, 55, 27, -141, 55,
	55, 27, -125, 28, 66, -131, 184, 58, -128, -128,
	-129, 104, 29, -129, -129, -129, -137, 57, 58, 58,
	50, -103, -114, -113, -97, -98, 121, 21, 119, 27,
	142, -114, 37, 66, 67, 68, -65, -58, -58, -58,
	-29, 137, 70, -157, -157, -30, 53, -106, -105, 21,
	-103, 57, 108, -156, -33, -157, -157, 53, 51, 21,
	-157, -30, -76, -74, 77, -33, -157, -157, -157, -157,
	-157, -47, -34, 10, 26, -87, 53, -157, -157, -157,
	53, 108, -79, -33, 52, -33, -156, -156, -156, -83,
	-104, -145, -146, -149, -148, -103, -150, 55, 52, -127,
	50, 57, 58, 59, 66, 192, 54, -129, -129, 55,
	55, 105, 54, 53, 53, 54, 53, -47, -47, -113,
	-103, -29, 70, -58, -58, -157, -32, -105, 96, -109,
	-31, -116, 105, 163, 136, 161, 157, 177, 168, 182,
	159, 183, -115, -116, 207, -79, 78, -33, 76, -52,
	-35, 27, -69, 32, -2, -156, -103, -103, -83, -86,
	-103, -51, -103, -51, -51, 54, 53, -124, -86, -135,
	180, 8, 57, 58, 58, -114, 25, -58, 108, -157,
	-157, -124, -124, -124, -133, -124, 151, -124, 151, -157,
	-157, -156, -28, 205, -33, -77, 12, 8, -67, -2,
	108, 53, 54, -157, 53, -157, -157, -148, 54, -136,
	125, 27, 124, 192, 54, 54, -156, 96, -128, 55,
	-58, -157, 57, -78, 13, 15, -88, -157, -103, -103,
	-103, 131, -126, 64, 27, 27, -151, -152, 142, -27,
	89, 210, -33, -66, -47, 57, -157, 53, -103, -157,
	208, 47, 211, 52, -152, 32, 37, 209, 212, -86,
	144, 37, 54, 145, 210, -156, 211, -58, 141, 212,
	-157, -157,
}
var yyDef = [...]int{

	18, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 406, 0, 182,
	182, 182, 182, 182, 0, 466, 448, 0, 0, 0,
	0, 0, 174, 632, 632, 632, 632, 632, 0, 0,
	0, 29, 30, 630, 1, 3, 414, 0, 0, 186,
	189, 184, 448, 0, 0, 0, 45, 0, 0, 623,
	0, 446, 467, 468, 471, 472, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, 603, 604, 605, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 624, 625, 626, 627, 628, 629, 0, 0, 449,
	0, 444, 0, 444, 0, 167, 250, 475, 476, 623,
	0, 632, 169, 170, 171, 479, 480, 481, 482, 483,
	484, 485, 486, 487, 488, 489, 490, 491, 492, 493,
	494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
	504, 505, 506, 507, 508, 509, 510, 511, 512, 513,
	514, 515, 516, 517, 518, 519, 520, 521, 522, 523,
	524, 525, 526, 527, 528, 529, 530, 531, 532, 533,
	534, 535, 536, 537, 538, 539, 540, 541, 542, 543,
	544, 545, 546, 547, 548, 549, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 173, 175, 176, 177, 178, 179,
	632, 632, 23, 418, 0, 0, 406, 25, 0, 182,
	187, 188, 192, 190, 191, 183, 0, 0, 211, 213,
	214, 215, 231, 0, 233, 0, 0, 36, 0, 39,
	-2, 574, -2, 439, 0, 388, 0, -2, -2, 0,
	51, 0, 0, 633, 0, 0, 0, 0, 633, 0,
	0, 0, 0, 0, 166, 0, 168, 172, 180, 181,
	24, 631, 19, 0, 0, 415, 260, 0, 265, 267,
	0, 302, 303, 304, 305, 306, 0, 0, 0, 0,
	0, 0, 0, 329, 330, 331, 332, 391, 392, 393,
	394, 395, 396, 397, 398, 269, 270, 388, 0, 438,
	0, 0, 0, 0, 0, 0, 0, 379, 0, 353,
	353, 353, 353, 353, 353, 353, 353, 0, 0, 0,
	0, 407, 408, 411, 414, 23, 189, 0, 194, 193,
	185, 0, 0, 249, 0, 0, 0, 0, 0, 0,
	238, 0, 0, 241, 0, 0, 0, 0, 232, 0,
	23, 0, 252, 234, 0, 236, 237, 258, 0, 0,
	34, 35, 632, 43, 44, 473, 474, 0, 41, 0,
	0, 143, 0, 105, 101, 57, 58, 94, 60, 94,
	94, 94, 94, 118, 118, 118, 118, 86, 87, 88,
	89, 90, 0, 73, 94, 94, 94, 77, 61, 62,
	63, 64, 65, 66, 67, 96, 96, 96, 98, 98,
	469, 47, 634, 635, 0, 49, 0, 0, 155, 0,
	163, 445, 0, 633, 251, 477, 478, 419, 0, 0,
	0, 0, 0, 0, 263, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 287, 288, 289, 290, 291, 292,
	293, 266, 0, 280, 0, 0, 0, 322, 323, 324,
	325, 326, 327, 0, 196, 0, 0, 300, 0, 0,
	0, 0, 0, 0, 192, 0, 380, 0, 345, 0,
	346, 347, 348, 349, 350, 351, 352, 0, 196, 0,
	0, 0, 410, 412, 413, 418, 26, 192, 0, 399,
	0, 0, 0, 195, 431, 0, 0, -2, 0, 248,
	258, 212, 227, 229, 0, 224, 239, 240, 242, 0,
	244, 0, 246, 247, 216, 217, 299, 23, 218, 0,
	0, 0, 235, 406, 0, 258, 37, 38, 440, 441,
	389, 0, -2, 50, 144, 146, 149, 150, 151, 52,
	53, 54, 0, 0, 141, 0, 0, 0, 0, 135,
	136, 108, 106, 0, 103, 102, 59, 0, 118, 118,
	80, 81, 121, 0, 121, 121, 121, 0, 74, 75,
	76, 68, 0, 69, 70, 71, 0, 72, 0, 0,
	633, 447, 632, 461, 156, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 459, 460, 0, 162, 633, 165,
	0, 261, 262, 264, 281, 0, 283, 285, 416, 417,
	271, 272, 296, 297, 298, 0, 0, 0, 0, 294,
	276, 0, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 321, 364, 365, 0, 319, 320,
	328, 0, 0, 197, 198, 200, 204, 0, 389, 0,
	437, 0, 0, 0, 0, 0, 0, 386, 383, 0,
	0, 354, 0, 0, 0, 0, 409, 20, 0, 442,
	443, 400, 401, 209, 27, 0, 431, 421, 433, 435,
	0, 23, 0, 427, 406, 221, 228, 0, 0, 222,
	0, 223, 243, 245, -2, 0, 0, 0, 414, 259,
	33, 0, 0, 147, 0, 0, 0, 131, 0, 133,
	134, 0, 114, 0, 107, 56, 104, 0, 121, 121,
	82, 0, 0, 83, 84, 85, 0, 92, 0, 0,
	0, 470, 48, 152, 0, 632, 462, 463, 464, 465,
	0, 164, 420, 282, 284, 286, 273, 294, 277, 0,
	274, 0, 0, 268, 333, 0, 0, 201, 205, 0,
	207, 208, 0, 196, 301, 336, 337, 0, 0, 0,
	0, 406, 0, 384, 0, 0, 344, 355, 356, 357,
	358, 21, 258, 0, 0, 28, 0, 436, -2, 0,
	0, 0, 414, 225, 0, 230, 0, 0, 0, 32,
	390, 145, 148, 0, 137, 94, 140, 132, 0, 116,
	0, 109, 110, 111, 112, 113, 95, 78, 79, 122,
	119, 120, 91, 0, 0, 99, 0, 633, 153, 154,
	0, 275, 0, 295, 278, 334, 199, 206, 202, 0,
	0, 0, 94, 94, 369, 94, 98, 372, 94, 374,
	94, 377, 0, 0, 0, 381, 343, 387, 0, 402,
	210, 0, 434, 0, -2, 0, 429, 428, 31, 0,
	219, 0, 256, 0, 0, 130, 0, 139, 0, 123,
	117, 0, 93, 0, 0, 46, 0, 279, 0, 335,
	338, 366, 118, 370, 371, 373, 375, 376, 378, 340,
	339, 0, 0, 0, 385, 404, 0, 0, 424, 23,
	0, 0, 226, 253, 0, 254, 255, 138, 0, 128,
	0, 125, 127, 115, 97, 100, 0, 203, 367, 368,
	359, 342, 382, 22, 0, 0, 432, -2, 430, 220,
	257, 0, 55, 0, 124, 126, 0, 158, 0, 0,
	0, 0, 405, 403, 0, 129, 157, 0, 0, 341,
	0, 0, 0, 0, 159, 0, 360, 0, 363, 0,
	0, 361, 142, 0, 0, 0, 0, 0, 0, 362,
	160, 161,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 214,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:279
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:284
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:285
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:289
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:306
		{
			setParseTree(yylex, nil)
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:313
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:321
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 21:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:325
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 22:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:332
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:338
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:342
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:348
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:352
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:359
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[5].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.OnDup = OnDup(yyDollar[6].updateExprs)
			yyVAL.statement = ins
		}
	case 28:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:370
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, updateList := range yyDollar[6].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[7].updateExprs)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:382
		{
			yyVAL.str = InsertStr
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:386
		{
			yyVAL.str = ReplaceStr
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:392
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:398
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Where: NewWhere(WhereStr, yyDollar[5].expr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:402
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:407
		{
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:408
		{
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:412
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:416
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:422
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Charset: yyDollar[4].colIdent}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:426
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:437
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:441
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:447
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:452
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName, NewName: yyDollar[7].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:457
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:461
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:467
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:474
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:481
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:486
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:490
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:494
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:500
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].optVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:511
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:521
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:526
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:532
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:536
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:540
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:544
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:548
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:552
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:556
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:562
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:568
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:574
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:580
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:586
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:594
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:598
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:602
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:606
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:610
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:616
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:620
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:624
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:628
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:632
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:636
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:640
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:644
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:648
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:652
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:656
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:660
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:664
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:668
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:674
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:679
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:684
		{
			yyVAL.optVal = nil
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:688
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:693
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:697
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:705
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:709
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:715
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:723
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:727
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:732
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:736
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:742
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:746
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:750
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:755
		{
			yyVAL.optVal = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:759
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:763
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:767
		{
			yyVAL.optVal = NewFloatVal(yyDollar[2].bytes)
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:771
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:775
		{
			yyVAL.optVal = NewValArg(yyDollar[2].bytes)
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:780
		{
			yyVAL.optVal = nil
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:784
		{
			yyVAL.optVal = NewValArg(yyDollar[3].bytes)
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:789
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:793
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:798
		{
			yyVAL.str = ""
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:802
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:806
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:811
		{
			yyVAL.str = ""
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:815
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:820
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:824
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:828
		{
			yyVAL.colKeyOpt = colKey
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:832
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:836
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:841
		{
			yyVAL.optVal = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:845
		{
			yyVAL.optVal = NewStrVal(yyDollar[2].bytes)
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:851
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:857
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:861
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:865
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:869
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:875
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:879
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:885
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:889
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:895
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:901
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:905
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 142:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line sql.y:911
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:916
		{
			yyVAL.str = ""
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:920
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:924
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:932
		{
			yyVAL.str = yyDollar[1].str
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:936
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:940
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:946
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:950
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:954
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:960
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 153:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:964
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 154:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:969
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:974
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:978
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 157:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:984
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:990
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:994
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 160:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1000
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 161:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line sql.y:1004
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1010
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1016
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1024
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 165:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1029
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1039
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1043
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1048
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1054
		{
			yyVAL.str = ShowUnsupportedStr
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1058
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowDatabasesStr, ShowTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1067
		{
			switch v := string(yyDollar[1].bytes); v {
			case ShowKeyspacesStr, ShowShardsStr, ShowVSchemaTablesStr:
				yyVAL.str = v
			default:
				yyVAL.str = ShowUnsupportedStr
			}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1078
		{
			yyVAL.statement = &Show{Type: yyDollar[2].str}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1084
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1088
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1094
		{
			yyVAL.statement = &OtherRead{}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1098
		{
			yyVAL.statement = &OtherRead{}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1102
		{
			yyVAL.statement = &OtherRead{}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1106
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1114
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1118
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1123
		{
			setAllowComments(yylex, true)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1127
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1133
		{
			yyVAL.bytes2 = nil
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1137
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1143
		{
			yyVAL.str = UnionStr
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1147
		{
			yyVAL.str = UnionAllStr
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1151
		{
			yyVAL.str = UnionDistinctStr
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1156
		{
			yyVAL.str = ""
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1160
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1164
		{
			yyVAL.str = SQLCacheStr
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1169
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1173
		{
			yyVAL.str = DistinctStr
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1178
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1182
		{
			yyVAL.str = StraightJoinHint
		}
	case 196:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1187
		{
			yyVAL.selectExprs = nil
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1191
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1197
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1201
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1207
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1211
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1215
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1219
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1224
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1228
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1232
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1239
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1244
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1248
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1258
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1268
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1272
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1276
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1288
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1292
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1305
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1309
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1313
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1317
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1325
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1329
		{
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1331
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1335
		{
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1337
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1340
		{
			yyVAL.empty = struct{}{}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1342
		{
			yyVAL.empty = struct{}{}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1360
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1366
		{
			yyVAL.str = JoinStr
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1370
		{
			yyVAL.str = JoinStr
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.str = JoinStr
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.str = StraightJoinStr
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1386
		{
			yyVAL.str = LeftJoinStr
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1390
		{
			yyVAL.str = LeftJoinStr
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1394
		{
			yyVAL.str = RightJoinStr
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1398
		{
			yyVAL.str = RightJoinStr
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1404
		{
			yyVAL.str = NaturalJoinStr
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1408
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1418
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1422
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1428
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1432
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1437
		{
			yyVAL.indexHints = nil
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1441
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].colIdents}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1445
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].colIdents}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1449
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].colIdents}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1455
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1459
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1464
		{
			yyVAL.expr = nil
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1468
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1474
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1478
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1482
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1504
		{
			yyVAL.str = ""
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1508
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1524
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1528
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1532
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1536
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1540
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1544
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1548
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1552
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 279:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1556
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1560
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1566
		{
			yyVAL.str = IsNullStr
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1570
		{
			yyVAL.str = IsNotNullStr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.str = IsTrueStr
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1578
		{
			yyVAL.str = IsNotTrueStr
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1582
		{
			yyVAL.str = IsFalseStr
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1586
		{
			yyVAL.str = IsNotFalseStr
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.str = EqualStr
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1596
		{
			yyVAL.str = LessThanStr
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1600
		{
			yyVAL.str = GreaterThanStr
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.str = LessEqualStr
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.str = GreaterEqualStr
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.str = NotEqualStr
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1621
		{
			yyVAL.expr = nil
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1625
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1631
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1635
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1639
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1645
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1651
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1655
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1673
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1677
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1681
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1685
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1689
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1693
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1697
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1701
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1705
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1709
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1721
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1725
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1729
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1733
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1737
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1741
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1745
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1749
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1757
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1771
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1775
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1779
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1797
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 334:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1801
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 335:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1815
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1819
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 338:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1823
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 339:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1827
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 340:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1831
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 341:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1835
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 342:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1847
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colIdent}
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1857
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1861
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1865
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1869
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1874
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1879
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1884
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1889
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 355:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1903
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1907
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 357:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1915
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1921
		{
			yyVAL.str = ""
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.str = BooleanModeStr
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1929
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 362:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:1933
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1937
		{
			yyVAL.str = QueryExpansionStr
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1943
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1947
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1965
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1969
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1973
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 372:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1979
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1983
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1987
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1991
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1995
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1999
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2003
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.expr = nil
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2012
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2017
		{
			yyVAL.str = string("")
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2021
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2027
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2031
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2037
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2042
		{
			yyVAL.expr = nil
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2046
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2052
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2056
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 390:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2060
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2066
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2070
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2074
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2078
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2082
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2086
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2090
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2094
		{
			yyVAL.expr = &NullVal{}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2100
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2109
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2113
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2118
		{
			yyVAL.exprs = nil
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2122
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 404:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2127
		{
			yyVAL.expr = nil
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2131
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 406:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2136
		{
			yyVAL.orderBy = nil
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2140
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2146
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2150
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2156
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2161
		{
			yyVAL.str = AscScr
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2165
		{
			yyVAL.str = AscScr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2169
		{
			yyVAL.str = DescScr
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2174
		{
			yyVAL.limit = nil
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2178
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 416:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2182
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 417:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2186
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2191
		{
			yyVAL.str = ""
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2195
		{
			yyVAL.str = ForUpdateStr
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2199
		{
			yyVAL.str = ShareModeStr
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2212
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2216
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2220
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2225
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:2229
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 426:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:2233
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2240
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2244
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2248
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 430:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2252
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2257
		{
			yyVAL.updateExprs = nil
		}
	case 432:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:2261
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2267
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2271
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2277
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2281
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2287
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2293
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2303
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2307
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2313
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 444:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2322
		{
			yyVAL.byt = 0
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2324
		{
			yyVAL.byt = 1
		}
	case 446:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2327
		{
			yyVAL.empty = struct{}{}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:2329
		{
			yyVAL.empty = struct{}{}
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2332
		{
			yyVAL.str = ""
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2334
		{
			yyVAL.str = IgnoreStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2338
		{
			yyVAL.empty = struct{}{}
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2340
		{
			yyVAL.empty = struct{}{}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2342
		{
			yyVAL.empty = struct{}{}
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2344
		{
			yyVAL.empty = struct{}{}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2346
		{
			yyVAL.empty = struct{}{}
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2348
		{
			yyVAL.empty = struct{}{}
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2350
		{
			yyVAL.empty = struct{}{}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2352
		{
			yyVAL.empty = struct{}{}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2354
		{
			yyVAL.empty = struct{}{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2356
		{
			yyVAL.empty = struct{}{}
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2358
		{
			yyVAL.empty = struct{}{}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2361
		{
			yyVAL.empty = struct{}{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2363
		{
			yyVAL.empty = struct{}{}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2365
		{
			yyVAL.empty = struct{}{}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2369
		{
			yyVAL.empty = struct{}{}
		}
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2371
		{
			yyVAL.empty = struct{}{}
		}
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2374
		{
			yyVAL.empty = struct{}{}
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2376
		{
			yyVAL.empty = struct{}{}
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2378
		{
			yyVAL.empty = struct{}{}
		}
	case 469:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2381
		{
			yyVAL.empty = struct{}{}
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:2383
		{
			yyVAL.empty = struct{}{}
		}
	case 471:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2387
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 472:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2391
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2398
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 475:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2404
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 476:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2408
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2415
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2592
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2601
		{
			decNesting(yylex)
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2606
		{
			forceEOF(yylex)
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:2611
		{
			forceEOF(yylex)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2615
		{
			forceEOF(yylex)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2619
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
